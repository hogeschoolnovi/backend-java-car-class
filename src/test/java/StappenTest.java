import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.ByteArrayOutputStream;
import java.io.PrintStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.Field;
import java.util.Arrays;
import java.util.Objects;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class StappenTest {

    ByteArrayOutputStream outputStream;
    PrintStream printStream;
    PrintStream originalPrintStream = System.out;

    @BeforeEach
    public void init(){
        outputStream = new ByteArrayOutputStream();
        printStream = new PrintStream(outputStream);
        System.setOut(printStream);
        Main.main(new String[]{});
    }

    @AfterEach
    public void cleanUp(){
        System.setOut(originalPrintStream);
    }

    @Test
    public void nullTest(){
        assertEquals( outputStream.toString(), "null" + System.lineSeparator());
        int carFields = Car.class.getDeclaredFields().length;
        assertEquals(1, carFields,"Je Car class moet 1 veld hebben, maar heeft er nu " + carFields);
    }

    @Test
    public void volvoTest(){
        assertEquals(outputStream.toString(), "null" + System.lineSeparator()+"Volvo" + System.lineSeparator());
        int carFields = Car.class.getDeclaredFields().length;
        assertEquals(1, carFields,"Je Car class moet 1 veld hebben, maar heeft er nu " + carFields);
    }

    @Test
    public void propertyTest(){
        int carFields = Car.class.getDeclaredFields().length;
        assertEquals(5, carFields,"Je Car class moet 5 velden hebben, maar heeft er nu " + carFields);
    }

    @Test
    public void constructorTest(){
        assertEquals(outputStream.toString(), "Volvo" + System.lineSeparator()+"CX90" + System.lineSeparator());

        int constructors = Arrays.stream(Car.class.getDeclaredConstructors()).filter(c ->c.getParameterCount()==2).toList().size();

        assertEquals(1, constructors, "Je Car class moet 1 constructor met 2 parameters hebben, maar heeft nu " + constructors + " constructors die 2 parameters hebben");
    }

    @Test
    public void allArgsTest(){
        assertEquals(outputStream.toString(), "Toyota" + System.lineSeparator()+"Aygo" + System.lineSeparator()+"2016"+ System.lineSeparator() + "blauw" + System.lineSeparator() + "1.2" + System.lineSeparator());

        int constructors = Arrays.stream(Car.class.getDeclaredConstructors()).filter(c ->c.getParameterCount()==5).toList().size();

        assertEquals(1, constructors, "Je Car class moet 1 constructor met 5 parameters hebben, maar heeft nu " + constructors + " constructors die 5 parameters hebben");

    }

}
